macro(TARGET_VULKAN)
    # Need vulkan
    if (NOT "${Vulkan_FOUND}") 
        find_package(Vulkan REQUIRED)
    endif()

    if (NOT KHRPP_DISABLE_VULKAN_PLATFORM)
        if (ANDROID)
            set(DEFAULT_VULKAN_PLATFORM VK_USE_PLATFORM_ANDROID_KHR)
        elseif (WIN32)
            set(DEFAULT_VULKAN_PLATFORM VK_USE_PLATFORM_WIN32_KHR)
        elseif(APPLE)
            set(DEFAULT_VULKAN_PLATFORM VK_USE_PLATFORM_MACOS_MVK)
        else()
            set(DEFAULT_VULKAN_PLATFORM VK_USE_PLATFORM_WAYLAND_KHR)
        endif()

        if (NOT KHRPP_VULKAN_PLATFORM)
            set(KHRPP_VULKAN_PLATFORM ${DEFAULT_VULKAN_PLATFORM})
        endif()
        target_compile_definitions(${TARGET_NAME} PRIVATE ${KHRPP_VULKAN_PLATFORM})
    endif()
        
    target_include_directories(${TARGET_NAME} PRIVATE ${Vulkan_INCLUDE_DIRS})
    target_link_libraries(${TARGET_NAME} PRIVATE ${Vulkan_LIBRARIES})
endmacro()